Немного про Git и почему это важно
(Если вы свободно работаете с Git, можете пропустить теорию, решить задачки и получить свои баллы. Всем остальным читать внимательно!)

Представьте, что вы долго работали над проектом с вашим кодом, но в день перед дедлайном ваш жесткий диск решил сгореть.

Или вы сделали необратимое изменение, и весь ваш код перестал работать, хотя вот вчера же все было хорошо. Что делать?

Или вам нужно работать совместно над проектом с несколькими людьми. Как синхронизировать действия?

Для решения всех этих проблем люди придумали системы контроля версий. Git — одна из наиболее популярных, и де-факто стандарт в современном мире IT практически для всех, кто пишет код.

Git позволяет сохранять изменения в файлах с кодом локально и хранить полную копию кода на удаленном сервере — например, github.com. Репозиторий с вашим проектом полезно иметь для себя: чтобы иметь доступ к коду с разных компьютеров, показывать его другим людям и работать над кодом совместно, а еще это отличное дополнение к резюме — оно покажет ваши навыки на практике.

По завершении этого курса у вас будет репозиторий с решениями задач по основным темам, которые мы охватим, и небольшой финальный проект со структурой из нескольких файлов, приближенный к тому, что бывает в проектах по автоматизации тестирования в реальной жизни.

Стоит сказать, что полноценное изучение всех-всех команд выходит за рамки данного курса, однако умение работать с системами контроля версий — важный навык для тестировщика, а для автоматизатора — жизненно важный! В данном уроке мы рассмотрим только основные команды, которые будут нужны для работы с этим курсом.

Подробнее предлагаем вам почитать самостоятельно — вам это обязательно пригодится.
====================================
Первые шаги: создаем аккаунт и свой первый репозиторий
Для начала нужно создать аккаунт на https://github.com. Выберите имя пользователя, введите почту и пароль. Лучше сразу подтвердить адрес электронной почты.

Время создать свой первый репозиторий — это место, где будет храниться ваш проект.

В правом верхнем углу рядом с аватаркой нажмите + и выберите "New repository".
Выберите имя для вашего репозитория. Лучше всего выбирать что-то осмысленное — чтобы через год легко было догадаться, что это и о чем. Например, "stepik — auto tests course".
Сформулируйте короткое описание для проекта. Здесь можно написать о том, что это домашние задания к курсу.
Выбираем Public (публичный) репозиторий: это означает, что любой сможет его найти и открыть.
Ставим галочку Initialize this repository with README.
Нажимаем кнопку Create repository.
 

new-repo-form

Ура! Теперь у вас есть собственный репозиторий! Пока здесь ничего нет, но мы это скоро исправим.
=================================
Клонируем репозиторий
Дальше мы будем работать с файлами локально — прямо на своем компьютере. Для этого нам понадобится клиент Git — это программа, которая отслеживает и записывает изменения в файлах.

Ubuntu:

apt-get install git

Windows:

https://gitforwindows.org/  —  скачать и установить клиент.

В Ubuntu можно выполнять команды в родном терминале, в Windows нужно запустить установленный git bash.

Для начала нужно скопировать к себе только что созданный репозиторий. Для этого применяется термин "склонировать".

На страничке своего проекта нажмите на зеленую кнопку Clone or download и скопируйте адрес из строки:



Чтобы склонировать к себе введите в консоли:

git clone *адрес вашего репозитория*  

Чтобы перейти в каталог репозитория, введите:

cd *имя репозитория *

 



В итоге, у вас на компьютере оказался ваш удаленный репозиторий. Давайте сделаем там парочку изменений!
=============================
