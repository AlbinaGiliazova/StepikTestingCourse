PyTest — преимущества и недостатки
Для написания данного урока мы вдохновлялись статьёй на Хабре, адаптировав ее к специфике тестирования веб-приложений с помощью Selenium WebDriver.
https://habr.com/post/269759/
Рассмотрим преимущества использования PyTest:

1) PyTest полностью обратно совместим с фреймворками unittest и nosetest. Это означает, что если изначально вы писали тесты, используя unittest, то перейти на PyTest можно буквально в ту же минуту. Для этого в вашем виртуальном окружении должен быть установлен пакет PyTest. Не забудьте активировать ваше виртуальное окружение и установите PyTest.

Для Windows:

> selenium_env\Scripts\activate.bat 
(selenium_env) С:\Users\user\environments>  pip install pytest==5.1.1
Для Linux и macOS:

​​​​​​​$ source selenium_env/bin/activate 

(selenium_env) $ pip install pytest==5.1.1
Теперь мы можем запустить тесты в нашем файле test_abs_project.py с помощью PyTest, не изменяя сам файл. PyTest сам найдёт тесты в папке, в которой вы их запускаете, и выполнит их:

pytest test_abs_project.py
2) Подробный отчёт с поддержкой цветовых схем из коробки.

3) PyTest не требует написания дополнительных специфических конструкций в тестах, как того требует unittest (no boilerplate).

4) Для проверок используется стандартный assert из Python.

5) Возможность создания динамических фикстур (специальных функций, которые настраивают тестовые окружения и готовят тестовые данные).

6) Дополнительные возможности по настройке фикстур.

7) Параметризация тестов — для одного теста можно задать разные параметры (тест запустится несколько раз с разными тестовыми данными).

8) Наличие маркировок (marks), которые позволяют маркировать тесты для их выборочного запуска.

9) Возможность передавать дополнительные параметры через командную строку для настройки тестовых окружений.

10) Большое количество плагинов, которые расширяют возможности PyTest и позволяют решать узкоспециализированные проблемы, что может сэкономить много времени.

Рассмотрим минусы PyTest:

1) PyTest требуется устанавливать дополнительно, так как он не входит в стандартный пакет библиотек Python, в отличие от unittest. Нужно не забывать об этом, когда вы будете настраивать автоматический запуск тестов с помощью CI-сервера.


2) Использование PyTest требует более глубокого понимания языка Python, чтобы разобраться, как применять фикстуры, параметризацию и другие возможности PyTest.
===========================================
Если работаете через PyCharm, то внизу экрана выберите вкладку "Terminal". Откроется терминал с уже активированным виртуальным окружением в рабочей директории. Там и нужно запускать команду

pytest test_abs_project.py
==================================
PyTest не любит точки в именах файлов. Пришлось переименовывать номера уроков и заменять точки на дефисы
друзья, pytest может ругаться на название файла. Вроде как надо чтоб начинался со слова test и точки не желательны
=================================
У кого не работает Pytest в Pycharm после установки пакета, посмотрите видео: https://youtu.be/ZHDmZ1ds1t0 . Скорее всего дело в этом.
=====================================
PyTest: правила запуска тестов 
В этом шаге мы коротко обсудим важные особенности запуска тестов с помощью PyTest. Когда мы выполняем команду pytest, тест-раннер собирает все тесты для запуска по определенным правилам:

если мы не передали никакого аргумента в команду, а написали просто pytest, тест-раннер начнёт поиск в текущей директории

как аргумент можно передать файл, путь к директории или любую комбинацию директорий и файлов, например: 

pytest scripts/selenium_scripts
# найти все тесты в директории scripts/selenium_scripts

pytest test_user_interface.py
# найти и выполнить все тесты в файле 

pytest scripts/drafts.py::test_register_new_user_parametrized
# найти тест с именем test_register_new_user_parametrized в указанном файле в указанной директории и выполнить 
дальше происходит рекурсивный поиск: то есть PyTest обойдет все вложенные директории

во всех директориях PyTest ищет файлы, которые удовлетворяют правилу  test_*.py или *_test.py (то есть начинаются на test_ или заканчиваются _test и имеют расширение .py)

внутри всех этих файлов находит тестовые функции по следующему правилу:

все тесты, название которых начинается с test, которые находятся вне классов

все тесты, название которых начинается с test внутри классов, имя которых начинается с Test (и без метода __init__ внутри класса)

Подробности: Conventions for Python test discovery
https://docs.pytest.org/en/stable/goodpractices.html#conventions-for-python-test-discovery
====================================
Вот эти выделенные мною слова "тесты", наверное, надо заменить на слово "функции"?
@Иванов_Александр, в первом случае на "функции", во втором на "методы" :)
=====================================
PyTest — отчёты
Вы могли заметить, что PyTest позволяет генерировать подробный отчёт с поддержкой цветовых схем и форматированием прямо из коробки.

Давайте еще раз запустим наши тесты с помощью unittest и PyTest, чтобы сравнить выводимый результат.

Мы видим, что в PyTest-отчёте упавший тест выделен красным шрифтом, что делает разбор логов более приятным занятием.

unittest:



PyTest: 



Если запустить PyTest с параметром -v (verbose, то есть подробный), то в отчёт добавится дополнительная информация со списком тестов и статусом их прохождения: 



Другие полезные команды для манипуляции выводом тестов PyTest можно найти по ссылке: Useful py.test commands.
https://gist.github.com/amatellanes/12136508b816469678c2
======================================
После прогона тестов в консоли очень много технической информации, можно как -то настроить запуск тестов, чтобы такая информация не выводилась?
@Марина_Петрова, можно например добавить флаг --tb=line 
=====================================
PyTest — как пишут тесты
PyTest не требует написания дополнительных специфических конструкций в тестах, как того требует unittest.

Мы уже увидели, что PyTest может запускать тесты, написанные в unittest-стиле. Перепишем наши тесты из test_abs_project.py в более простом формате, который также понимает PyTest. Назовём новый файл test_abs.py:

def test_abs1():
    assert abs(-42) == 42, "Should be absolute value of a number"

def test_abs2():
    assert abs(-42) == -42, "Should be absolute value of a number"

Запустим тесты в этом файле:

pytest test_abs.py
Код тестов стал короче и читабельнее.
======================================
PyTest — проверка ожидаемого результата (assert)
Если вы используете unittest, то для проверки ожидаемых результатов в тестах вам нужно знать и использовать большой набор assert-методов, например, таких: assertEqual, assertNotEqual, assertTrue, assertFalse и другие.

В PyTest используется стандартный assert метод из языка Python, что делает код более очевидным.

Давайте сравним два подхода. Проверим, что две переменные равны друг другу.

unittest:

self.assertEqual(a, b, msg="Значения разные")
PyTest:

assert a == b, "Значения разные"
С помощью assert можно проверять любую конструкцию, которая возвращает True/False. Это может быть проверка равенства, неравенства, содержания подстроки в строке или любая другая вспомогательная функция, которую вы опишете самостоятельно. Все это делает код проверок приятным и понятным для чтения: 

assert user_is_authorised(), "User is guest"
Если нужно проверить, что тест вызывает ожидаемое исключение (довольно редкая ситуация для UI-тестов, и вам этот способ, скорее всего, никогда не пригодится), мы можем использовать специальную конструкцию with pytest.raises(). Например, можно проверить, что на странице сайта не должен отображаться какой-то элемент:

import pytest

from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException


def test_exception1():
    try:
        browser = webdriver.Chrome()
        browser.get("http://selenium1py.pythonanywhere.com/")
        with pytest.raises(NoSuchElementException):
            browser.find_element_by_css_selector("button.btn")
            pytest.fail("Не должно быть кнопки Отправить")
    finally: 
        browser.quit()

def test_exception2():
    try:
        browser = webdriver.Chrome()
        browser.get("http://selenium1py.pythonanywhere.com/")
        with pytest.raises(NoSuchElementException):
            browser.find_element_by_css_selector("no_such_button.btn")
            pytest.fail("Не должно быть кнопки Отправить")
    finally: 
        browser.quit()
В первом тесте элемент будет найден, поэтому ошибка NoSuchElementException, которую ожидает контекстный менеджер pytest.raises, не возникнет, и тест упадёт.

test_3_3_9_pytest_raises.py:8 (test_exception1)
E   Failed: Не должно быть кнопки Отправить
Во втором тесте, как мы и ожидали, кнопка не будет найдена, и тест пройдет. 
========================================
@Maria_Bezymyannaya, импорт нужно выполнять в случаях, когда в своем коде вы явно используете pytest
==========================================
Содержание урока
В этом уроке мы еще раз пробежимся по основным методам и концепциям, которые мы использовали в этом модуле. Это поможет вам закрепить знания и лучше запомнить всё то, что мы изучили. 

Важно отметить, что PyTest — это огромный инструмент с кучей самых разных настроек, разбираться в которых можно очень долго. В этом модуле мы постарались дать вам самый необходимый минимум для написания автотестов. В случае каких-то проблем или потребностей советуем обращаться к документации PyTest: она подробная и с большим количеством примеров.
https://docs.pytest.org/en/latest/contents.html
==============================
Тестирование с помощью PyTest 
Статья про PyTest https://habr.com/ru/post/269759/
Введение в PyTest https://medium.com/@dmrlx/%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-pytest-cc6175c7d0dc
Документация PyTest https://docs.pytest.org/en/latest/
Conventions for Python test discovery https://docs.pytest.org/en/stable/goodpractices.html
Полезные флаги pytest https://gist.github.com/amatellanes/12136508b816469678c2

